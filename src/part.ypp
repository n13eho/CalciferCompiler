
%{
	#include <stdlib.h>
	#include <stdio.h>
	#include <iostream>
	#include "sysy_node.hpp"
	extern int yylex();
	void yyerror(char const *s);
	using namespace std;
%}

%union{
        struct GrammaNode *no;
}


%type <no> ASSIGN SEMI COMM RDBRAL RDBRAR SQBRAL SQBRAR BRAL BRAR ADD SUB DIV MUL MOD EQ NOT NEQ OR AND LT BG LQ BQ ZERO INT CONST IntConst_D IntConst_O IntConst_H VOID IF ELSE WHILE BREAK CONTINUE RETURN MAIN Ident
%type <no> Decl ConstDecl ConstDefs ConstDef ConstExps Exp LVal Exps PrimaryExp UnaryExp UnaryOp FuncRParams MulExp AddExp IntConst
%type <no> CompUnit VarDecl VarDefs VarDef InitVal InitVals FuncDef FuncFParams FuncFParam Block BlockItems BlockItem Stmt Cond RelExp EqExp LAndExp LOrExp

%token ASSIGN SEMI COMM RDBRAL RDBRAR SQBRAL SQBRAR BRAL BRAR
%token ADD SUB DIV MUL MOD EQ NOT NEQ OR AND LT BG LQ BQ
%token ZERO INT CONST IntConst_D IntConst_O IntConst_H VOID IF ELSE WHILE BREAK CONTINUE RETURN MAIN
%token Ident 


%left MUL
%left ADD
%left SUB
%left DIV
%left MOD
%left NOT

%%

CompUnit:
	Decl				{Droot->son.push_back($1);}
	|FuncDef			{Droot->son.push_back($1);}
	|CompUnit Decl		{Droot->son.push_back($2);}
	|CompUnit FuncDef	{Droot->son.push_back($2);}
;

Decl:
    ConstDecl {$$=$1;}
	|VarDecl  {$$=$1;}
;

//常数声明
ConstDecl:
	CONST INT ConstDefs SEMI {$$=$3;}
;

//常数定义
ConstDefs:
	ConstDef 					{$$=new GrammaNode(ConstDefs_,"ConstDefs_");$$->son.push_back($1);}
	|ConstDefs COMM ConstDef	{$1->son.push_back($3);}		
;

//常数定义
ConstDef:
	Ident SQBRAL ConstExps SQBRAR ASSIGN InitVal {$$ = new GrammaNode(ConstDef_array_,"ConstDef_array_"); $$->son.push_back($1);$$->son.push_back($3);$$->son.push_back($6);}
	|Ident ASSIGN InitVal {$$ = new GrammaNode(ConstDef_single_,"ConstDef_single_"); $$->son.push_back($1);$$->son.push_back($3);}
;


VarDecl:
	INT VarDefs SEMI				{$$=$2;}
;

VarDefs:
	VarDef							{$$ = new GrammaNode(VarDefs_,"VarDefs"); $$->son.push_back($1);}
	|VarDefs COMM VarDef			{$1->son.push_back($3);}
;	

VarDef:
	Ident SQBRAL ConstExps SQBRAR ASSIGN InitVal	{$$ = new GrammaNode(VarDef_array_init_,"VarDef_array_init_"); $$->son.push_back($1);$$->son.push_back($3);$$->son.push_back($6);}
	|Ident SQBRAL ConstExps	SQBRAR			{$$ = new GrammaNode(VarDef_array_,"VarDef_array_"); $$->son.push_back($1);$$->son.push_back($3);}
	|Ident 				{$$ = new GrammaNode(VarDef_single_,"VarDef_single_"); $$->son.push_back($1);}
	|Ident ASSIGN InitVal	{$$ = new GrammaNode(VarDef_single_init_,"VarDef_single_init_"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
;

InitVal:
	Exp								{$$ = new GrammaNode(InitVal_EXP,"InitVal_EXP"); $$->son.push_back($1);}
	|BRAL BRAR						{$$ = new GrammaNode(InitVal_NULL,"InitVal_NULL");}
	|BRAL InitVals BRAR				{$$ = new GrammaNode(InitVal_,"InitVal"); $$->son.push_back($2);}
;

InitVals:
	InitVal							{$$ = new GrammaNode(InitVals_,"InitVals"); $$->son.push_back($1);}
	|InitVals COMM InitVal			{$1->son.push_back($3);}
;

FuncDef:
	INT Ident RDBRAL RDBRAR Block			{$$ = new GrammaNode(FuncDef_int_,"FuncDef_int_"); $$->son.push_back($2);$$->son.push_back($5);}
	|VOID Ident RDBRAL RDBRAR Block			{$$ = new GrammaNode(FuncDef_void_,"FuncDef_void_"); $$->son.push_back($2);$$->son.push_back($5);}
	|INT Ident RDBRAL FuncFParams RDBRAR Block {$$ = new GrammaNode(FuncDef_int_para_,"FuncDef_int_para_"); $$->son.push_back($2);$$->son.push_back($4);$$->son.push_back($6);}
	|VOID Ident RDBRAL FuncFParams RDBRAR Block {$$ = new GrammaNode(FuncDef_void_para_,"FuncDef_void_para_"); $$->son.push_back($2);$$->son.push_back($4);$$->son.push_back($6);}
;

FuncFParams:
	FuncFParam							{$$ = new GrammaNode(FuncFParams_,"FuncFParams"); $$->son.push_back($1);}
	|FuncFParams COMM FuncFParam		{$1->son.push_back($3);}
;

FuncFParam:
	INT Ident							{$$ = new GrammaNode(FuncFParam_single_,"FuncFParam_single_"); $$->son.push_back($2);}
	|INT Ident SQBRAL SQBRAR Exps		{$$ = new GrammaNode(FuncFParam_array_,"FuncFParam_array_"); $$->son.push_back($2);$$->son.push_back($3);$$->son.push_back($4);$$->son.push_back($5);}
	|INT Ident SQBRAL SQBRAR 			{$$ = new GrammaNode(FuncFParam_singleArray_,"FuncFParam_singleArray_"); $$->son.push_back($2);$$->son.push_back($3);$$->son.push_back($4);}
;

BlockItems:
	BlockItem							{$$ = new GrammaNode(Block_,"Block"); $$->son.push_back($1);}
	|BlockItems BlockItem				{$1->son.push_back($2);}	
;

Block:
	BRAL BlockItems BRAR				{$$=$2;}
	|BRAL BRAR							{}
;

BlockItem:
	Decl								{$$=$1;}
	|Stmt								{$$=$1;}
;


Stmt:
	LVal ASSIGN Exp SEMI				{$$ = new GrammaNode(Stmt_Assign_,"Stmt_Assign"); $$->son.push_back($1);$$->son.push_back($3);}
	|SEMI								{}
	|Exp SEMI							{$$ = new GrammaNode(Stmt_Exp_,"Stmt_Exp"); $$->son.push_back($1);}
	|Block								{$$=$1;}
	|IF RDBRAL Cond RDBRAR Stmt			{$$ = new GrammaNode(Stmt_If_,"Stmt_If");$$->son.push_back($3);$$->son.push_back($5);}
	|IF RDBRAL Cond RDBRAR Stmt ELSE Stmt {$$ = new GrammaNode(Stmt_IfElse_,"Stmt_IfElse");$$->son.push_back($3);$$->son.push_back($5);$$->son.push_back($7);}
	|WHILE RDBRAL Cond RDBRAR Stmt		{$$ = new GrammaNode(Stmt_While_,"Stmt_While"); $$->son.push_back($3);$$->son.push_back($5);}
	|BREAK SEMI							{$$=$1;}
	|CONTINUE SEMI						{$$=$1;}
	|RETURN SEMI						{$$=$1;}
	|RETURN Exp SEMI					{$$ = new GrammaNode(Stmt_Return_,"Stmt_Return"); $$->son.push_back($2);}

//可删
Cond:
	LOrExp		{$$ = new GrammaNode(Cond_,"Cond"); $$->son.push_back($1);}
;

//常数定义中数组[]
ConstExps:
		Exp 							{$$ = new GrammaNode(ConstExps_,"ConstExps");$$->son.push_back($1); }
	 	|ConstExps SQBRAR SQBRAL Exp 	{$1->son.push_back($4);}
;

//表达式
Exp:
	AddExp 						{$$ =$1;}
;

//左值表达式
LVal:
	Ident Exps					{$$ = new GrammaNode(LVal_Array_,"LVal_"); $$->son.push_back($1);$$->son.push_back($2);}
    |Ident 						{$$ = $1;}
;

//数组表达式
Exps:
	SQBRAL Exp SQBRAR			{$$ = new GrammaNode(Exps_,"Exps_"); $$->son.push_back($2);}
    |Exps SQBRAL Exp SQBRAR		{$1->son.push_back($3);}
;

//基本表达式
PrimaryExp:
	RDBRAL Exp RDBRAR			{$$=$2;}
	  |LVal						{$$=$1;}
	  |IntConst					{$$=$1;}
;

//待测试
//一元表达式
UnaryExp:
	PrimaryExp						{$$ = $1;}
	|Ident RDBRAL RDBRAR			{$$ = new GrammaNode(UnaryExp_func_,"UnaryExp_func_"); $$->son.push_back($1);}
	|Ident RDBRAL FuncRParams RDBRAR	{$$ = new GrammaNode(UnaryExp_func_,"UnaryExp_func_"); $$->son.push_back($1);$$->son.push_back($3);}
	|UnaryOp UnaryExp					{$$ = new GrammaNode(UnaryExp_,"UnaryExp_"); $$->son.push_back($1);$$->son.push_back($2);}
;

//单目运算符
UnaryOp:
		ADD				{$$=$1;}
       |SUB				{$$=$1;}
       |NOT				{$$=$1;}
;

// //函数实参表
// FuncRParamse:
// 	    FuncRParams	   {$$ = new GrammaNode(FuncRParamse_,"FuncRParamse_"); $$->son.push_back($1);}
// ;

//实参
FuncRParams:
		Exp					{$$ = new GrammaNode(FuncRParams_,"FuncRParams_"); $$->son.push_back($1);}
	   |FuncRParams COMM Exp{$1->son.push_back($3);}	   
;

//乘除模表达式
MulExp:
		UnaryExp				{$$ = $1;}
      |MulExp MUL UnaryExp	{$$ = new GrammaNode(MulExp_Mul_,"MulExp_Mul"); $$->son.push_back($1);$$->son.push_back($3);}
      |MulExp DIV UnaryExp	{$$ = new GrammaNode(MulExp_Div_,"MulExp_Div"); $$->son.push_back($1);$$->son.push_back($3);}
      |MulExp MOD UnaryExp	{$$ = new GrammaNode(MulExp_Mod_,"MulExp_Mod"); $$->son.push_back($1);$$->son.push_back($3);}
;

//加减表达式
AddExp:
	MulExp				{$$=$1;}
      |AddExp ADD MulExp	{$$ = new GrammaNode(AddExp_Add_,"AddExp_Add"); $$->son.push_back($1);$$->son.push_back($3);}
      |AddExp SUB MulExp	{$$ = new GrammaNode(AddExp_Sub_,"AddExp_Sub"); $$->son.push_back($1);$$->son.push_back($3);}
;

RelExp:
	AddExp				{$$ = $1;}
	|RelExp LT AddExp	{$$ = new GrammaNode(RelExp_LT_,"RelExp_LT"); $$->son.push_back($1);$$->son.push_back($3);}
	|RelExp BG AddExp	{$$ = new GrammaNode(RelExp_BG_,"RelExp_BG"); $$->son.push_back($1);$$->son.push_back($3);}
	|RelExp LQ AddExp	{$$ = new GrammaNode(RelExp_LQ_,"RelExp_LQ"); $$->son.push_back($1);$$->son.push_back($3);}
	|RelExp BQ AddExp	{$$ = new GrammaNode(RelExp_BQ_,"RelExp_BQ"); $$->son.push_back($1);$$->son.push_back($3);}
;

EqExp:					
	RelExp				{$$ = $1;}
	|EqExp EQ RelExp	{$$ = new GrammaNode(EqExp_EQ_,"EqExp_EQ"); $$->son.push_back($1);$$->son.push_back($3);}
	|EqExp NEQ RelExp	{$$ = new GrammaNode(EqExp_NEQ_,"EqExp_NEQ"); $$->son.push_back($1);$$->son.push_back($3);}
;

LAndExp:
	EqExp				{$$ = new GrammaNode(LAndExp_,"LAndExp"); $$->son.push_back($1);}
	|LAndExp AND EqExp	{$1->son.push_back($3);}
;

LOrExp:
	LAndExp				{$$ = new GrammaNode(LOrExp_,"LOrExp"); $$->son.push_back($1);}
	|LOrExp OR LAndExp	{$1->son.push_back($3);}
;


//ok
IntConst:
	IntConst_D	{$$ = $1;}
	  |IntConst_O	{$$ = $1;}
	  |IntConst_H	{$$ = $1;}
	  |ZERO			{$$ = $1;}
;





%%

void yyerror(char const *s)
{
printf("%s\n",s);
return;
}



