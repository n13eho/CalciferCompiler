
%{
	#include <stdlib.h>
	#include <stdio.h>
	#include <iostream>
	#include "sysy_node.hpp"
	extern int yylex();
	void yyerror(char const *s);
	using namespace std;
%}

%union{
        struct GrammaNode *no;
}


%type <no> ASSIGN SEMI COMM RDBRAL RDBRAR SQBRAL SQBRAR BRAL BRAR ADD SUB DIV MUL MOD EQ NOT NEQ OR AND LT BG LQ BQ ZERO INT CONST IntConst_D IntConst_O IntConst_H VOID IF ELSE WHILE BREAK CONTINUE RETURN MAIN Ident
%type <no> Decl ConstDecl ConstDefs ConstDef ConstInitVal ConstInitVals ConstExps ConstExp Exp LVal Exps PrimaryExp UnaryExp UnaryOp FuncRParamse FuncRParams MulExp AddExp IntConst
%type <no> CompUnit VarDecl VarDefs VarDef InitVal InitVals FuncDef FuncType FuncFParams FuncFParam Block BlockItems BlockItem Stmt Cond RelExp EqExp LAndExp LOrExp

%token ASSIGN SEMI COMM RDBRAL RDBRAR SQBRAL SQBRAR BRAL BRAR
%token ADD SUB DIV MUL MOD EQ NOT NEQ OR AND LT BG LQ BQ
%token ZERO INT CONST IntConst_D IntConst_O IntConst_H VOID IF ELSE WHILE BREAK CONTINUE RETURN MAIN
%token Ident 


%left MUL
%left ADD
%left SUB
%left DIV
%left MOD
%left NOT

%%

CompUnit:
	Decl				{Droot->son.push_back($1);}
	|FuncDef			{Droot->son.push_back($1);}
	|CompUnit Decl		{Droot->son.push_back($2);}
	|CompUnit FuncDef	{Droot->son.push_back($2);}
;

Decl:
    ConstDecl {$$=$1;}
	|VarDecl  {$$=$1;}
;

//常数声明
ConstDecl:
	CONST INT ConstDefs SEMI {$$=$3;}
;

//常数定义
ConstDefs:
	ConstDef 					{$$=new GrammaNode(ConstDefs_,"ConstDefs_");$$->son.push_back($1);}
	|ConstDefs COMM ConstDef	{$1->son.push_back($3);}		
;

//常数定义
ConstDef:
	Ident SQBRAL ConstExps SQBRAR ASSIGN InitVal {$$ = new GrammaNode(ConstDef_,"ConstDef_"); $$->son.push_back($1);$$->son.push_back($3);$$->son.push_back($6);}
	|Ident ASSIGN InitVal {$$ = new GrammaNode(ConstDef_,"ConstDef_"); $$->son.push_back($1);$$->son.push_back($3);}
;


VarDecl:
	INT VarDefs SEMI				{$$=$2;}
;

VarDefs:
	VarDef							{$$ = new GrammaNode(VarDefs_,"VarDefs"); $$->son.push_back($1);}
	|VarDefs COMM VarDef			{$1->son.push_back($3);}
;	

VarDef:
	Ident SQBRAL ConstExps SQBRAR ASSIGN InitVal	{$$ = new GrammaNode(VarDef_,"VarDef"); $$->son.push_back($1);$$->son.push_back($3);$$->son.push_back($6);}
	|Ident SQBRAL ConstExps	SQBRAR			{$$ = new GrammaNode(VarDef_,"VarDef"); $$->son.push_back($1);$$->son.push_back($3);}
	|Ident 				{$$ = new GrammaNode(VarDef_,"VarDef"); $$->son.push_back($1);}
	|Ident ASSIGN InitVal	{$$ = new GrammaNode(VarDef_,"VarDef"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
;

InitVal:
	Exp								{$$ = new GrammaNode(InitVal_,"InitVal_EXP"); $$->son.push_back($1);}
	|BRAL BRAR						{$$ = new GrammaNode(InitVal_,"InitVal_NULL");}
	|BRAL InitVals BRAR				{$$ = new GrammaNode(InitVal_,"InitVal"); $$->son.push_back($2);}
;

InitVals:
	InitVal							{$$ = new GrammaNode(InitVals_,"InitVals"); $$->son.push_back($1);}
	|InitVals COMM InitVal			{$1->son.push_back($3);}
;

FuncDef:
	INT Ident RDBRAL RDBRAR Block			{$$ = new GrammaNode(FuncDef_,"FuncDef"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($5);}
	|VOID Ident RDBRAL RDBRAR Block			{$$ = new GrammaNode(FuncDef_,"FuncDef"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($5);}
	|INT Ident RDBRAL FuncFParams RDBRAR Block {$$ = new GrammaNode(FuncDef_,"FuncDef"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($4);$$->son.push_back($6);}
	|VOID Ident RDBRAL FuncFParams RDBRAR Block {$$ = new GrammaNode(FuncDef_,"FuncDef"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($4);$$->son.push_back($6);}
;

FuncFParams:
	FuncFParam							{$$ = new GrammaNode(FuncFParams_,"FuncFParams"); $$->son.push_back($1);}
	|FuncFParams COMM FuncFParam		{$1->son.push_back($3);}
;

FuncFParam:
	INT Ident							{$$ = new GrammaNode(FuncFParam_,"FuncFParam"); $$->son.push_back($2);}
	|INT Ident SQBRAL SQBRAR Exps		{$$ = new GrammaNode(FuncFParam_,"FuncFParam"); $$->son.push_back($2);$$->son.push_back($3);$$->son.push_back($4);$$->son.push_back($5);}
	|INT Ident SQBRAL SQBRAR 			{$$ = new GrammaNode(FuncFParam_,"FuncFParam"); $$->son.push_back($2);$$->son.push_back($3);$$->son.push_back($4);}
;

BlockItems:
	BlockItem							{$$ = new GrammaNode(Block_,"Block"); $$->son.push_back($1);}
	|BlockItems BlockItem				{$1->son.push_back($2);}	
;

Block:
	BRAL BlockItems BRAR				{$$=$2;}
	|BRAL BRAR							{}
;

BlockItem:
	Decl								{$$=$1;}
	|Stmt								{$$=$1;}
;


Stmt:
	LVal ASSIGN Exp SEMI				{$$ = new GrammaNode(Stmt_,"Stmt"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);$$->son.push_back($4);}
	|SEMI								{$$ = new GrammaNode(Stmt_,"Stmt"); $$->son.push_back($1);}
	|Exp SEMI							{$$ = new GrammaNode(Stmt_,"Stmt"); $$->son.push_back($1);$$->son.push_back($2);}
	|Block								{$$ = new GrammaNode(Stmt_,"Stmt"); $$->son.push_back($1);}
	|IF RDBRAL Cond RDBRAR Stmt			{$$ = new GrammaNode(Stmt_,"Stmt"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);$$->son.push_back($4);$$->son.push_back($5);}
	|IF RDBRAL Cond RDBRAR Stmt ELSE Stmt {$$ = new GrammaNode(Stmt_,"Stmt"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);$$->son.push_back($4);$$->son.push_back($5);$$->son.push_back($6);$$->son.push_back($7);}
	|WHILE RDBRAL Cond RDBRAR Stmt		{$$ = new GrammaNode(Stmt_,"Stmt"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);$$->son.push_back($4);$$->son.push_back($5);}
	|BREAK SEMI							{$$ = new GrammaNode(Stmt_,"Stmt"); $$->son.push_back($1);$$->son.push_back($2);}
	|CONTINUE SEMI						{$$ = new GrammaNode(Stmt_,"Stmt"); $$->son.push_back($1);$$->son.push_back($2);}
	|RETURN SEMI						{$$ = new GrammaNode(Stmt_,"Stmt"); $$->son.push_back($1);$$->son.push_back($2);}
	|RETURN Exp SEMI					{$$ = new GrammaNode(Stmt_,"Stmt"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
;

Cond:
	LOrExp		{$$ = new GrammaNode(Cond_,"Cond"); $$->son.push_back($1);}
;

//常数定义中数组[]
ConstExps:
		Exp 							{$$ = new GrammaNode(ConstExps_,"ConstExps");$$->son.push_back($1); }
	 	|ConstExps SQBRAR SQBRAL Exp 	{$1->son.push_back($4);}
;

//表达式
Exp:
	AddExp 						{$$ = new GrammaNode(Exp_,"Exp_"); $$->son.push_back($1);}
;

//左值表达式
LVal:
	Ident Exps					{$$ = new GrammaNode(LVal_,"LVal_"); $$->son.push_back($1);$$->son.push_back($2);}
    |Ident 						{$$ = new GrammaNode(LVal_,"LVal_"); $$->son.push_back($1);}
;

//数组表达式
Exps:
	SQBRAL Exp SQBRAR			{$$ = new GrammaNode(Exps_,"Exps_"); $$->son.push_back($2);}
    |Exps SQBRAL Exp SQBRAR		{$1->son.push_back($3);}
;

//基本表达式
PrimaryExp:
	RDBRAL Exp RDBRAR	{$$ = new GrammaNode(PrimaryExp_,"PrimaryExp"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
	  |LVal						{$$ = new GrammaNode(PrimaryExp_,"PrimaryExp"); $$->son.push_back($1);}
	  |IntConst					{$$ = new GrammaNode(PrimaryExp_,"PrimaryExp"); $$->son.push_back($1);}
;

//一元表达式
UnaryExp:
	PrimaryExp						{$$ = new GrammaNode(UnaryExp_,"UnaryExp_"); $$->son.push_back($1);}
	|Ident RDBRAL RDBRAR			{$$ = new GrammaNode(UnaryExp_,"UnaryExp_"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
	|Ident RDBRAL FuncRParamse RDBRAR	{$$ = new GrammaNode(UnaryExp_,"UnaryExp_"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);$$->son.push_back($4);}
	|UnaryOp UnaryExp					{$$ = new GrammaNode(UnaryExp_,"UnaryExp_"); $$->son.push_back($1);$$->son.push_back($2);}
;

//单目运算符
UnaryOp:
		ADD				{$$ = new GrammaNode(UnaryOp_,"UnaryOp_"); $$->son.push_back($1);}
       |SUB				{$$ = new GrammaNode(UnaryOp_,"UnaryOp_"); $$->son.push_back($1);}
       |NOT				{$$ = new GrammaNode(UnaryOp_,"UnaryOp_"); $$->son.push_back($1);}
;

//函数实参表
FuncRParamse:
	    FuncRParams	   {$$ = new GrammaNode(FuncRParamse_,"FuncRParamse_"); $$->son.push_back($1);}
;

//实参
FuncRParams:
		Exp					{$$ = new GrammaNode(FuncRParams_,"FuncRParams_"); $$->son.push_back($1);}
	   |FuncRParams COMM Exp{$1->son.push_back($3);}	   
;

//乘除模表达式
MulExp:
		UnaryExp				{$$ = new GrammaNode(MulExp_,"MulExp_"); $$->son.push_back($1);}
      |MulExp MUL UnaryExp	{$$ = new GrammaNode(MulExp_,"MulExp_"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
      |MulExp DIV UnaryExp	{$$ = new GrammaNode(MulExp_,"MulExp_"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
      |MulExp MOD UnaryExp	{$$ = new GrammaNode(MulExp_,"MulExp_"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
;

//加减表达式
AddExp:
	MulExp				{$$ = new GrammaNode(AddExp_,"AddExp"); $$->son.push_back($1);}
      |AddExp ADD MulExp	{$$ = new GrammaNode(AddExp_,"AddExp"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
      |AddExp SUB MulExp	{$$ = new GrammaNode(AddExp_,"AddExp"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
;

RelExp:
	AddExp				{$$ = new GrammaNode(RelExp_,"RelExp"); $$->son.push_back($1);}
	|RelExp LT AddExp	{$$ = new GrammaNode(RelExp_,"RelExp"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
	|RelExp BG AddExp	{$$ = new GrammaNode(RelExp_,"RelExp"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
	|RelExp LQ AddExp	{$$ = new GrammaNode(RelExp_,"RelExp"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
	|RelExp BQ AddExp	{$$ = new GrammaNode(RelExp_,"RelExp"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
;

EqExp:					
	RelExp				{$$ = new GrammaNode(EqExp_,"EqExp"); $$->son.push_back($1);}
	|EqExp EQ RelExp	{$$ = new GrammaNode(EqExp_,"EqExp"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
	|EqExp NEQ RelExp	{$$ = new GrammaNode(EqExp_,"EqExp"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
;

LAndExp:
	EqExp				{$$ = new GrammaNode(LAndExp_,"LAndExp"); $$->son.push_back($1);}
	|LAndExp AND EqExp	{$$ = new GrammaNode(LAndExp_,"LAndExp"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
;

LOrExp:
	LAndExp				{$$ = new GrammaNode(LOrExp_,"LOrExp"); $$->son.push_back($1);}
	|LOrExp OR LAndExp	{$$ = new GrammaNode(LOrExp_,"LOrExp"); $$->son.push_back($1);$$->son.push_back($2);$$->son.push_back($3);}
;


//ok
IntConst:
	IntConst_D	{$$ = new GrammaNode(IntConst_,"IntConst"); $$->son.push_back($1);}
	  |IntConst_O	{$$ = new GrammaNode(IntConst_,"IntConst"); $$->son.push_back($1);}
	  |IntConst_H	{$$ = new GrammaNode(IntConst_,"IntConst"); $$->son.push_back($1);}
	  |ZERO			{$$ = new GrammaNode(IntConst_,"IntConst"); $$->son.push_back($1);}
;





%%

void yyerror(char const *s)
{
printf("%s\n",s);
return;
}



